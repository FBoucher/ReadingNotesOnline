// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace ReadingNotesServices.Models
{
    public partial class ReadingNotes
    {
        private IDictionary<string, string> _notes;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IDictionary<string, string> Notes
        {
            get { return this._notes; }
            set { this._notes = value; }
        }
        
        private string _tags;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        private string _title;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Title
        {
            get { return this._title; }
            set { this._title = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ReadingNotes class.
        /// </summary>
        public ReadingNotes()
        {
            this.Notes = new LazyDictionary<string, string>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken objectDictionary = ((JToken)inputObject["Object"]);
                if (objectDictionary != null && objectDictionary.Type != JTokenType.Null)
                {
                    foreach (JProperty property in objectDictionary)
                    {
                        this.Notes.Add(((string)property.Name), property.Value.ToString(Newtonsoft.Json.Formatting.Indented));
                    }
                }
                JToken tagsValue = inputObject["Tags"];
                if (tagsValue != null && tagsValue.Type != JTokenType.Null)
                {
                    this.Tags = ((string)tagsValue);
                }
                JToken titleValue = inputObject["Title"];
                if (titleValue != null && titleValue.Type != JTokenType.Null)
                {
                    this.Title = ((string)titleValue);
                }
            }
        }
    }
}
