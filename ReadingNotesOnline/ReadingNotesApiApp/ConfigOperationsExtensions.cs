// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ReadingNotesServices;
using ReadingNotesServices.Models;

namespace ReadingNotesServices
{
    public static partial class ConfigOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IConfigOperations.
        /// </param>
        public static Config Get(this IConfigOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConfigOperations)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IConfigOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Config> GetAsync(this IConfigOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ReadingNotesServices.Models.Config> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IConfigOperations.
        /// </param>
        public static object IncrementCounter(this IConfigOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConfigOperations)s).IncrementCounterAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IConfigOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> IncrementCounterAsync(this IConfigOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.IncrementCounterWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IConfigOperations.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        public static object Post(this IConfigOperations operations, Config value)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConfigOperations)s).PostAsync(value);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IConfigOperations.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostAsync(this IConfigOperations operations, Config value, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostWithOperationResponseAsync(value, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
