// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using ReadingNotesServices;
using ReadingNotesServices.Models;

namespace ReadingNotesServices
{
    public static partial class ReadingNotesOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IReadingNotesOperations.
        /// </param>
        /// <param name='editionNumber'>
        /// Required.
        /// </param>
        public static ReadingNotes BuildReadingNotes(this IReadingNotesOperations operations, string editionNumber)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReadingNotesOperations)s).BuildReadingNotesAsync(editionNumber);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IReadingNotesOperations.
        /// </param>
        /// <param name='editionNumber'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ReadingNotes> BuildReadingNotesAsync(this IReadingNotesOperations operations, string editionNumber, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<ReadingNotesServices.Models.ReadingNotes> result = await operations.BuildReadingNotesWithOperationResponseAsync(editionNumber, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IReadingNotesOperations.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        public static string ReProcessJSonReadingNotes(this IReadingNotesOperations operations, string filename)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IReadingNotesOperations)s).ReProcessJSonReadingNotesAsync(filename);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ReadingNotesServices.IReadingNotesOperations.
        /// </param>
        /// <param name='filename'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> ReProcessJSonReadingNotesAsync(this IReadingNotesOperations operations, string filename, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.ReProcessJSonReadingNotesWithOperationResponseAsync(filename, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
